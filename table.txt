enum Category : uint16_t {
    Spaces,            Other,             Action_name_begin,
    Action_name_body,  Delimiters,        Dollar,
    Backslash,         Opened_square_br,  After_colon,
    After_backslash,   Begin_expr,        End_expr,
    Hat
};

/*
 * It happens that in std::map<K,V> the key type is integer, and a lot of keys with the same corresponding values.
 * If such a map must be a generated constant, then this map can be optimized. Namely, iterating through a map using
 * range-based for, we will build a std::vector<std::pair<K, V>>.
 * Then we group pairs std::pair<K, V> in pairs in the form (segment, a value of type V), where 'segment' is a struct
 * consisting of lower bound and upper bound. Next, we permute the grouped pair in the such way that in order to search
 * for in the array of the resulting values we can use the algorithm from the answer to exercise 6.2.24 of the book
 * Knuth D.E. The art of computer programming. Volume 3. Sorting and search. --- 2nd ed. --- Addison-Wesley, 1998.
*/

#define RandomAccessIterator typename
#define Callable             typename
#define Integral             typename
template<typename T>
struct Segment{
    T lower_bound;
    T upper_bound;

    Segment()               = default;
    Segment(const Segment&) = default;
    ~Segment()              = default;
};

template<typename T, typename V>
struct Segment_with_value{
    Segment<T> bounds;
    V          value;

    Segment_with_value()                          = default;
    Segment_with_value(const Segment_with_value&) = default;
    ~Segment_with_value()                         = default;
};

/* This function uses algorithm from the answer to the exercise 6.2.24 of the monography
 *  Knuth D.E. The art of computer programming. Volume 3. Sorting and search. --- 2nd ed.
 *  --- Addison-Wesley, 1998.
*/
template<RandomAccessIterator I, typename K>
std::pair<bool, size_t> knuth_find(I it_begin, I it_end, K key)
{
    std::pair<bool, size_t> result = {false, 0};
    size_t                  i      = 1;
    size_t                  n      = it_end - it_begin;
    while (i <= n) {
        const auto& curr        = it_begin[i - 1];
        const auto& curr_bounds = curr.bounds;
        if(key < curr_bounds.lower_bound){
            i = 2 * i;
        }else if(key > curr_bounds.upper_bound){
            i = 2 * i + 1;
        }else{
            result.first = true; result.second = i - 1;
            break;
        }
    }
    return result;
}
static const Segment_with_value<char32_t, uint16_t> categories_table[] = {
    {{U'}', U'}'}, 2576},  {{U'a', U'a'},   12},  {{U'M', U'Q'},   12},  {{U'b', U'b'},  268},  
    {{U'0', U'9'},    8},  {{U'c', U'c'},   12},  {{U'R', U'R'},  268},  {{U'd', U'd'},  268},  
    {{U'$', U'$'},  544},  {{U'e', U'k'},   12},  {{U'S', U'Z'},   12},  {{U'l', U'l'},  268},  
    {{U'?', U'?'},  528},  {{U'm', U'm'},   12},  {{U'[', U'['},  640},  {{U'n', U'n'},  780},  
    {{   1,   32},    1},  {{U'o', U'o'},  268},  {{U'\', U'\'},  576},  {{U'p', U'q'},   12},  
    {{U'A', U'K'},   12},  {{U'r', U'r'},  268},  {{U']', U']'},  512},  {{U's', U'w'},   12},  
    {{U'(', U'+'},  528},  {{U'x', U'x'},  268},  {{U'^', U'^'}, 4096},  {{U'y', U'z'},   12},  
    {{U'L', U'L'},  268},  {{U'{', U'{'}, 1552},  {{U'_', U'_'},   12},  {{U'|', U'|'},  528},  
  
};

static const size_t num_of_elems_in_categories_table = 32;

uint64_t get_categories_set(char32_t c){
    auto t = knuth_find(categories_table,
                        categories_table + num_of_elems_in_categories_table,
                        c);

    return t.first ? categories_table[t.second].value : (1ULL << Other)
}

